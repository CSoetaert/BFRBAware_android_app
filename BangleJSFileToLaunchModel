class CircularBuffer {
  constructor(size) {
    this.buffer = [];
    for (let i = 0; i < size; i++) this.buffer.push(null);
    this.pointer = 0;
    this.bufferSize = size;
  }

  push(data) {
    this.buffer[this.pointer] = data;
    this.pointer = (this.pointer + 1) % this.bufferSize;
  }

  toArray() {
    var orderedBuffer = [];
    for (var i = 0; i < this.bufferSize; i++) {
      orderedBuffer.push(this.buffer[(this.pointer + i) % this.bufferSize]);
    }
    return orderedBuffer;
  }
}

function predict(model, inputData) {
  const result = model.predict(data);
  console.log("Model loaded :",result);
}

const SENSOR_DATA_RATE = 2.5;
const GESTURE_CHECK_MS = 2000;
const BUFFER_SIZE_SECONDS = 18; 
const BUFFER_SIZE = SENSOR_DATA_RATE * BUFFER_SIZE_SECONDS;

const buffer = new CircularBuffer(BUFFER_SIZE);
const model = require("Storage").read(".tfmodel");

console.log("Model: ", model);

function checkForGesture() {
  const dataWindow = buffer.toArray();

  setTimeout(checkForGesture, GESTURE_CHECK_MS);}

Bangle.on('accel', (accelData) => {
  buffer.push({x: accelData.x, y: accelData.y, z: accelData.z});
});

checkForGesture();

//not functional as we don't know how to load the model and make predictions
